apiVersion: v1               #spécifie quelle version de l'API est utilisée pour créer cet objet
kind: Service                #spécifie quel type d'objet K8s est déclaré ici
metadata:                    #section des metadata concernant l'objet déclaré
  name: wordpress            #nom du service
  labels:                    #liste de label(s) attribué(s) a ce service
    app: wordpress           #déclare un label de nom 'app' avec la valeur 'wordpress'
spec:                        #spécifications décrivant le service 'wordpress'
  ports:
    - port: 80               #déclare le port du service
  selector:
    app: wordpress           #sélecteur permettant de cibler les pods ayant le label "app = 'wordpress'"
    tier: frontend           #idem pour le label "tier = 'frontend'"
  type: LoadBalancer         #défini quel type de service est déclaré
---                          #indique que la déclaration du service est finie et que la déclaration d'un autre objet débute
apiVersion: v1
kind: PersistentVolumeClaim  
metadata:
  name: wp-pv-claim
  labels:
    app: wordpress
spec:
  accessModes:              #défini la règle d'accès au volume
    - ReadWriteOnce         #le volume peut être monté en lecture-écriture sur un seul node
  resources:
    requests:
      storage: 20Gi         #spécifie la quantité de stockage requise pour ce PVC
---
apiVersion: apps/v1         
kind: Deployment
metadata:
  name: wordpress
  labels:
    app: wordpress
spec:
  selector:                 #sélecteur permettant de cibler les pods
    matchLabels:            #défini la règle de sélection, ici les pods possédants tous les labels déclarés dans cette section seront  
      app: wordpress        #ciblés par ce déploiement
      tier: frontend        #les pods ayant les labels "app = 'wordpress'" et "tier = 'frontend'" sont ciblés
  strategy:                 #défini la stratégie de mise a jour des pods dans ce déploiement
    type: Recreate          #arrête tous les pods ayant a être mis a jour avant de tous les recréer
  template:                 #défini le déploiement
    metadata:           
      labels:
        app: wordpress
        tier: frontend
    spec:                               #spécification du/des pod(s)
      containers:                       #déclaration du conteneur qui va être éxécuté dans le(s) pod(s)
      - image: wordpress:4.8-apache     #image utilisée pour créer les conteneurs
        name: wordpress                 #début du nom du/des pods
        env:                            #liste des variables d'environnement
        - name: WORDPRESS_DB_HOST       #nom de la première variable d'environnement
          value: wordpress-mysql        #valeur de cette variable
        - name: WORDPRESS_DB_PASSWORD   #nom de la deuxième variable d'environnement
          valueFrom:                    #défini que la valeur de cette variable n'est pas fournie directement ici
            secretKeyRef:               #indique que la valeur va provenir d'un secret
              name: mysql-pass          #fourni le nom du secret qui contient la valeur
              key: password             #indique quelle clée du secret contient la valeur
        ports:                          #déclaration des ports du/des conteneurs
        - containerPort: 80             #défini sur quel port les conteneurs vont pouvoir communiquer
          name: wordpress               #défini le nom du port utilisé
        volumeMounts:                          #déclare ou le volume doit êre monté dans le conteneur
        - name: wordpress-persistent-storage   #spécifie le nom du volume à utiliser
          mountPath: /var/www/html             #spécifie le chemin d'accès au volume
      volumes:                                 #informations a propos du volume
      - name: wordpress-persistent-storage     #nom du volume
        persistentVolumeClaim:                 #permet de lier le volume a un PVC
          claimName: wp-pv-claim               #nom du PersistantVolumeClaim lié a ce volume
